h1.svelte-y0j2fm,p.svelte-y0j2fm{margin:0 auto}h1.svelte-y0j2fm{font-size:2.8em;font-weight:700;margin:0 0 0.5em 0}p.svelte-y0j2fm{margin:1em auto}@media(min-width: 480px){h1.svelte-y0j2fm{font-size:4em}}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIkQ6L0NvZGUvQ29MZWFybmluZ1dlYi1Gcm9udEVuZC9zcmMvcm91dGVzL19lcnJvci5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cclxuXHRleHBvcnQgbGV0IGVycm9yLCBzdGF0dXM7XHJcblxyXG5cdGxldCBkZXYgPSBcImRldmVsb3BtZW50XCIgPT09IFwiZGV2ZWxvcG1lbnRcIjtcclxuPC9zY3JpcHQ+XHJcblxyXG48c3ZlbHRlOmhlYWQ+XHJcblx0PHRpdGxlPntzdGF0dXN9PC90aXRsZT5cclxuPC9zdmVsdGU6aGVhZD5cclxuXHJcbjxoMT57c3RhdHVzfTwvaDE+XHJcblxyXG48cD57ZXJyb3IubWVzc2FnZX08L3A+XHJcblxyXG57I2lmIGRldiAmJiBlcnJvci5zdGFja31cclxuXHQ8cHJlPntlcnJvci5zdGFja308L3ByZT5cclxuey9pZn1cclxuXHJcbjxzdHlsZT5cclxuXHRoMSxcclxuXHRwIHtcclxuXHRcdG1hcmdpbjogMCBhdXRvO1xyXG5cdH1cclxuXHJcblx0aDEge1xyXG5cdFx0Zm9udC1zaXplOiAyLjhlbTtcclxuXHRcdGZvbnQtd2VpZ2h0OiA3MDA7XHJcblx0XHRtYXJnaW46IDAgMCAwLjVlbSAwO1xyXG5cdH1cclxuXHJcblx0cCB7XHJcblx0XHRtYXJnaW46IDFlbSBhdXRvO1xyXG5cdH1cclxuXHJcblx0QG1lZGlhIChtaW4td2lkdGg6IDQ4MHB4KSB7XHJcblx0XHRoMSB7XHJcblx0XHRcdGZvbnQtc2l6ZTogNGVtO1xyXG5cdFx0fVxyXG5cdH1cclxuPC9zdHlsZT4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBbUJDLGdCQUFFLENBQ0YsQ0FBQyxjQUFDLENBQUMsQUFDRixNQUFNLENBQUUsQ0FBQyxDQUFDLElBQUksQUFDZixDQUFDLEFBRUQsRUFBRSxjQUFDLENBQUMsQUFDSCxTQUFTLENBQUUsS0FBSyxDQUNoQixXQUFXLENBQUUsR0FBRyxDQUNoQixNQUFNLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxBQUNwQixDQUFDLEFBRUQsQ0FBQyxjQUFDLENBQUMsQUFDRixNQUFNLENBQUUsR0FBRyxDQUFDLElBQUksQUFDakIsQ0FBQyxBQUVELE1BQU0sQUFBQyxZQUFZLEtBQUssQ0FBQyxBQUFDLENBQUMsQUFDMUIsRUFBRSxjQUFDLENBQUMsQUFDSCxTQUFTLENBQUUsR0FBRyxBQUNmLENBQUMsQUFDRixDQUFDIn0= */.switch.svelte-1e55jv3{position:relative;display:inline-block;width:60px;height:34px}.switch.svelte-1e55jv3 input.svelte-1e55jv3{opacity:0;width:0;height:0}.slider.svelte-1e55jv3{position:absolute;cursor:pointer;top:0;left:0;right:0;bottom:0;background-color:#ccc;-webkit-transition:.4s;transition:.4s}.slider.svelte-1e55jv3:before{position:absolute;content:"";height:26px;width:26px;left:4px;bottom:4px;background-color:white;-webkit-transition:.4s;transition:.4s}input:checked+.slider.svelte-1e55jv3{background-color:#2196F3}input:focus+.slider.svelte-1e55jv3{box-shadow:0 0 1px #2196F3}input:checked+.slider.svelte-1e55jv3:before{-webkit-transform:translateX(26px);-ms-transform:translateX(26px);transform:translateX(26px)}.slider.round.svelte-1e55jv3{border-radius:34px}.slider.round.svelte-1e55jv3:before{border-radius:50%}.divider-grey.svelte-1e55jv3{padding-bottom:1rem;border-top:solid 4px #d3d3d3}.green-text.svelte-1e55jv3{color:#7ed5b7}.grey-text.svelte-1e55jv3{color:cadetblue;font-weight:700}.topic-text.svelte-1e55jv3{color:#a9a9a9}.orange-text.svelte-1e55jv3{color:#ffaa3c}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */.desc-parent.svelte-fe1sja{margin:12px 0 0 0}.desc-text.svelte-fe1sja{margin:0 0 5px 0}.red-text.svelte-fe1sja{color:red}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */input.svelte-10a54fr::-webkit-outer-spin-button,input.svelte-10a54fr::-webkit-inner-spin-button{-webkit-appearance:none;margin:0}input[type=number].svelte-10a54fr{-moz-appearance:textfield}input[type=checkbox].svelte-10a54fr{cursor:pointer;margin:2px}label.svelte-10a54fr{cursor:pointer;font-size:1.25rem;color:#55595c}.policy-label.svelte-10a54fr{padding-top:20px}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIkQ6L0NvZGUvQ29MZWFybmluZ1dlYi1Gcm9udEVuZC9zcmMvcm91dGVzL3JlZ2lzdGVyL2luZGV4LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxyXG5cdGltcG9ydCB7IGdvdG8sIHN0b3JlcyB9IGZyb20gJ0BzYXBwZXIvYXBwJztcclxuXHRpbXBvcnQgTGlzdEVycm9ycyBmcm9tICcuLi9fY29tcG9uZW50cy9MaXN0RXJyb3JzLnN2ZWx0ZSc7XHJcblx0aW1wb3J0IHsgcG9zdCB9IGZyb20gJ3V0aWxzLmpzJztcclxuXHJcblx0Y29uc3QgeyBzZXNzaW9uIH0gPSBzdG9yZXMoKTtcclxuXHJcblx0bGV0IHVzZXJuYW1lID0gJyc7XHJcblx0bGV0IGVtYWlsID0gJyc7XHJcblx0bGV0IHBhc3N3b3JkID0gJyc7XHJcblx0bGV0IGNuZnBhc3N3b3JkID0gJyc7XHJcblx0bGV0IGxlYXJuaW5nQXJlYSA9ICcnO1xyXG5cdGxldCBwaG9uZU5vID0gbnVsbDtcclxuXHRsZXQgZXJyb3JzID0gbnVsbDtcclxuXHRsZXQgaXNMZWFybmVyID0gZmFsc2U7XHJcblx0bGV0IGlzR3VpZGUgPSBmYWxzZTtcclxuXHRsZXQgaXNDb0xlYXJuZXIgPSBmYWxzZTtcclxuXHRsZXQgYWdyZWVQb2xpY3kgPSBmYWxzZTtcclxuXHJcblx0YXN5bmMgZnVuY3Rpb24gc3VibWl0KGV2ZW50KSB7XHJcblx0XHRjb25zdCByZXNwb25zZSA9IGF3YWl0IHBvc3QoYGF1dGgvcmVnaXN0ZXJgLCB7IHVzZXJuYW1lLCBlbWFpbCwgcGFzc3dvcmQgfSk7XHJcblxyXG5cdFx0Ly8gVE9ETyBoYW5kbGUgbmV0d29yayBlcnJvcnNcclxuXHRcdGVycm9ycyA9IHJlc3BvbnNlLmVycm9ycztcclxuXHJcblx0XHRpZiAocmVzcG9uc2UudXNlcikge1xyXG5cdFx0XHQkc2Vzc2lvbi51c2VyID0gcmVzcG9uc2UudXNlcjtcclxuXHRcdFx0Z290bygnLycpO1xyXG5cdFx0fVxyXG5cdH1cclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGU+XHJcblx0LyogQ2hyb21lLCBTYWZhcmksIEVkZ2UsIE9wZXJhICovXHJcblx0aW5wdXQ6Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24sXHJcblx0aW5wdXQ6Oi13ZWJraXQtaW5uZXItc3Bpbi1idXR0b24ge1xyXG5cdFx0LXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xyXG5cdFx0bWFyZ2luOiAwO1xyXG5cdH1cclxuXHJcblx0LyogRmlyZWZveCAqL1xyXG5cdGlucHV0W3R5cGU9bnVtYmVyXSB7XHJcblx0XHQtbW96LWFwcGVhcmFuY2U6IHRleHRmaWVsZDtcclxuXHR9XHJcblxyXG5cdGlucHV0W3R5cGU9Y2hlY2tib3hdIHtcclxuXHRcdGN1cnNvcjogcG9pbnRlcjtcclxuXHRcdG1hcmdpbjogMnB4O1xyXG5cdH1cclxuXHRsYWJlbHtcclxuXHRcdGN1cnNvcjogcG9pbnRlcjtcclxuXHRcdGZvbnQtc2l6ZTogMS4yNXJlbTtcclxuICAgIFx0Y29sb3I6ICM1NTU5NWM7XHJcblx0fVxyXG5cdC5wb2xpY3ktbGFiZWx7XHJcblx0XHRwYWRkaW5nLXRvcDogMjBweDtcclxuXHR9XHJcbjwvc3R5bGU+XHJcblxyXG48c3ZlbHRlOmhlYWQ+XHJcblx0PHRpdGxlPlNpZ24gdXAg4oCiIExlYXJuaW5nIFdlYjwvdGl0bGU+XHJcbjwvc3ZlbHRlOmhlYWQ+XHJcblxyXG48ZGl2IGNsYXNzPVwiYXV0aC1wYWdlXCI+XHJcblx0PGRpdiBjbGFzcz1cImNvbnRhaW5lciBwYWdlXCI+XHJcblx0XHQ8ZGl2IGNsYXNzPVwicm93XCI+XHJcblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wtbWQtNiBvZmZzZXQtbWQtMyBjb2wteHMtMTJcIj5cclxuXHRcdFx0XHQ8aDEgY2xhc3M9XCJ0ZXh0LXhzLWNlbnRlclwiPlNpZ24gdXA8L2gxPlxyXG5cdFx0XHRcdDxwIGNsYXNzPVwidGV4dC14cy1jZW50ZXJcIj5cclxuXHRcdFx0XHRcdDxhIGhyZWY9XCIvbG9naW5cIj5IYXZlIGFuIGFjY291bnQ/PC9hPlxyXG5cdFx0XHRcdDwvcD5cclxuXHJcblx0XHRcdFx0PExpc3RFcnJvcnMge2Vycm9yc30vPlxyXG5cclxuXHRcdFx0XHQ8Zm9ybSBvbjpzdWJtaXR8cHJldmVudERlZmF1bHQ9e3N1Ym1pdH0+XHJcblx0XHRcdFx0XHQ8ZmllbGRzZXQgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XHJcblx0XHRcdFx0XHRcdDxpbnB1dCBjbGFzcz1cImZvcm0tY29udHJvbCBmb3JtLWNvbnRyb2wtbGdcIiB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiWW91ciBOYW1lXCIgYmluZDp2YWx1ZT17dXNlcm5hbWV9PlxyXG5cdFx0XHRcdFx0PC9maWVsZHNldD5cclxuXHRcdFx0XHRcdDxmaWVsZHNldCBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cclxuXHRcdFx0XHRcdFx0PGlucHV0IGNsYXNzPVwiZm9ybS1jb250cm9sIGZvcm0tY29udHJvbC1sZ1wiIHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJFbWFpbFwiIGJpbmQ6dmFsdWU9e2VtYWlsfT5cclxuXHRcdFx0XHRcdDwvZmllbGRzZXQ+XHJcblx0XHRcdFx0XHQ8ZmllbGRzZXQgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XHJcblx0XHRcdFx0XHRcdDxpbnB1dCBjbGFzcz1cImZvcm0tY29udHJvbCBmb3JtLWNvbnRyb2wtbGdcIiB0eXBlPVwicGFzc3dvcmRcIiBwbGFjZWhvbGRlcj1cIlBhc3N3b3JkXCIgYmluZDp2YWx1ZT17cGFzc3dvcmR9PlxyXG5cdFx0XHRcdFx0PC9maWVsZHNldD5cclxuXHRcdFx0XHRcdDxmaWVsZHNldCBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cclxuXHRcdFx0XHRcdFx0PGlucHV0IGNsYXNzPVwiZm9ybS1jb250cm9sIGZvcm0tY29udHJvbC1sZ1wiIHR5cGU9XCJwYXNzd29yZFwiIHBsYWNlaG9sZGVyPVwiQ29uZmlybSBQYXNzd29yZFwiIGJpbmQ6dmFsdWU9e2NuZnBhc3N3b3JkfT5cclxuXHRcdFx0XHRcdDwvZmllbGRzZXQ+XHJcblx0XHRcdFx0XHQ8ZmllbGRzZXQgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XHJcblx0XHRcdFx0XHRcdDxpbnB1dCBjbGFzcz1cImZvcm0tY29udHJvbCBmb3JtLWNvbnRyb2wtbGdcIiB0eXBlPVwibnVtYmVyXCIgcGxhY2Vob2xkZXI9XCJQaG9uZSBOdW1iZXJcIiBiaW5kOnZhbHVlPXtwaG9uZU5vfT5cclxuXHRcdFx0XHRcdDwvZmllbGRzZXQ+XHJcblx0XHRcdFx0XHQ8ZmllbGRzZXQ+XHJcblx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJyb3dcIj5cclxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhzLTRcIj5cclxuXHRcdFx0XHRcdFx0XHRcdDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWxcIj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0PGlucHV0IHR5cGU9Y2hlY2tib3ggYmluZDpjaGVja2VkPXtpc0xlYXJuZXJ9PiBMZWFybmluZ1xyXG5cdFx0XHRcdFx0XHRcdFx0PC9sYWJlbD5cclxuXHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhzLTRcIj5cclxuXHRcdFx0XHRcdFx0XHRcdDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWxcIj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0PGlucHV0IHR5cGU9Y2hlY2tib3ggYmluZDpjaGVja2VkPXtpc0d1aWRlfT4gR3VpZGluZ1xyXG5cdFx0XHRcdFx0XHRcdFx0PC9sYWJlbD5cclxuXHRcdFx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLXhzLTRcIj5cclxuXHRcdFx0XHRcdFx0XHRcdDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWxcIj5cclxuXHRcdFx0XHRcdFx0XHRcdFx0PGlucHV0IHR5cGU9Y2hlY2tib3ggYmluZDpjaGVja2VkPXtpc0NvTGVhcm5lcn0+IENvLUxlYXJuZXJcclxuXHRcdFx0XHRcdFx0XHRcdDwvbGFiZWw+XHJcblx0XHRcdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0PC9maWVsZHNldD5cclxuXHRcdFx0XHRcdDxmaWVsZHNldCBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cclxuXHRcdFx0XHRcdFx0PGlucHV0IGNsYXNzPVwiZm9ybS1jb250cm9sIGZvcm0tY29udHJvbC1sZ1wiIHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJBcmVhIG9mIExlYXJuaW5nXCIgYmluZDp2YWx1ZT17bGVhcm5pbmdBcmVhfT5cclxuXHRcdFx0XHRcdDwvZmllbGRzZXQ+XHJcblx0XHRcdFx0XHQ8ZmllbGRzZXQ+XHJcblx0XHRcdFx0XHRcdDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWwgcG9saWN5LWxhYmVsXCI+XHJcblx0XHRcdFx0XHRcdFx0PGlucHV0IHR5cGU9Y2hlY2tib3ggYmluZDpjaGVja2VkPXthZ3JlZVBvbGljeX0+IEkgYWdyZWUgdGhlIHBvbGljaWVzIGFuZCBwcml2YWNpZXMgb2YgdGhlIHN5c3RlbS5cclxuXHRcdFx0XHRcdFx0PC9sYWJlbD5cclxuXHRcdFx0XHRcdDwvZmllbGRzZXQ+XHJcblx0XHRcdFx0XHQ8YnV0dG9uIGRpc2FibGVkPXshYWdyZWVQb2xpY3l9IGNsYXNzPVwiYnRuIGJ0bi1sZyBidG4tcHJpbWFyeSBwdWxsLXhzLXJpZ2h0XCI+XHJcblx0XHRcdFx0XHRcdFNpZ24gdXBcclxuXHRcdFx0XHRcdDwvYnV0dG9uPlxyXG5cdFx0XHRcdDwvZm9ybT5cclxuXHRcdFx0PC9kaXY+XHJcblx0XHQ8L2Rpdj5cclxuXHQ8L2Rpdj5cclxuPC9kaXY+Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtDQyxvQkFBSywyQkFBMkIsQ0FDaEMsb0JBQUssMkJBQTJCLEFBQUMsQ0FBQyxBQUNqQyxrQkFBa0IsQ0FBRSxJQUFJLENBQ3hCLE1BQU0sQ0FBRSxDQUFDLEFBQ1YsQ0FBQyxBQUdELEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQUMsQ0FBQyxBQUNuQixlQUFlLENBQUUsU0FBUyxBQUMzQixDQUFDLEFBRUQsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBQyxDQUFDLEFBQ3JCLE1BQU0sQ0FBRSxPQUFPLENBQ2YsTUFBTSxDQUFFLEdBQUcsQUFDWixDQUFDLEFBQ0Qsb0JBQUssQ0FBQyxBQUNMLE1BQU0sQ0FBRSxPQUFPLENBQ2YsU0FBUyxDQUFFLE9BQU8sQ0FDZixLQUFLLENBQUUsT0FBTyxBQUNsQixDQUFDLEFBQ0QsNEJBQWEsQ0FBQyxBQUNiLFdBQVcsQ0FBRSxJQUFJLEFBQ2xCLENBQUMifQ== */.full-width.svelte-1g2ozdh{width:100%}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIkQ6L0NvZGUvQ29MZWFybmluZ1dlYi1Gcm9udEVuZC9zcmMvcm91dGVzL19jb21wb25lbnRzL0hvbWUuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XHJcblx0bGV0IHNlYXJjaFRleHQgPSAnJztcclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGU+XHJcbi5mdWxsLXdpZHRoe1xyXG5cdHdpZHRoOiAxMDAlO1xyXG59XHJcbjwvc3R5bGU+XHJcblxyXG48c3ZlbHRlOmhlYWQ+XHJcblx0PHRpdGxlPkxlYXJuaW5nIFdlYjwvdGl0bGU+XHJcbjwvc3ZlbHRlOmhlYWQ+XHJcblxyXG48ZGl2IGNsYXNzPVwiaG9tZS1wYWdlXCI+XHJcblx0TmV3IEhvbWUgUGFnZVxyXG5cdDxkaXYgY2xhc3M9XCJjb250YWluZXIgcGFnZVwiPlxyXG5cdFx0PGRpdiBjbGFzcz1cInJvd1wiPlxyXG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLW1kLTggb2Zmc2V0LW1kLTIgY29sLXhzLTEyXCI+XHJcblx0XHRcdFx0PGRpdiBjbGFzcz1cImlucHV0LWdyb3VwXCI+XHJcblx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXAtYnRuXCI+XHJcblx0XHRcdFx0XHQ8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1kZWZhdWx0XCIgdHlwZT1cInN1Ym1pdFwiPlxyXG5cdFx0XHRcdFx0XHQ8aW9uLWljb24gbmFtZT1cInNlYXJjaC1vdXRsaW5lXCI+PC9pb24taWNvbj5cclxuXHRcdFx0XHRcdDwvYnV0dG9uPlxyXG5cdFx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0XHQ8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHBsYWNlaG9sZGVyPVwiU2VhcmNoIGZvciB0aGUgdG9waWMgeW91IHdpc2ggdG8gbGVhcm5cIiBiaW5kOnZhbHVlPXtzZWFyY2hUZXh0fT5cclxuXHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHQ8aHIgLz5cclxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwicm93XCI+XHJcblx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLW1kLTZcIj5cclxuXHRcdFx0XHRcdFx0PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gZnVsbC13aWR0aFwiPlZpZXcgcmVjaWV2ZWQgcmVxdWVzdHM8L2J1dHRvbj5cclxuXHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cImNvbC1tZC02XCI+XHJcblx0XHRcdFx0XHRcdDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGZ1bGwtd2lkdGhcIj5WaWV3IHNlbnQgcmVxdWVzdHM8L2J1dHRvbj5cclxuXHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHQ8L2Rpdj5cclxuXHRcdDwvZGl2PlxyXG5cdDwvZGl2PlxyXG48L2Rpdj4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0EsMEJBQVcsQ0FBQyxBQUNYLEtBQUssQ0FBRSxJQUFJLEFBQ1osQ0FBQyJ9 */