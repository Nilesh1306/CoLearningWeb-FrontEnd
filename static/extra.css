h1.svelte-y0j2fm,p.svelte-y0j2fm{margin:0 auto}h1.svelte-y0j2fm{font-size:2.8em;font-weight:700;margin:0 0 0.5em 0}p.svelte-y0j2fm{margin:1em auto}@media(min-width: 480px){h1.svelte-y0j2fm{font-size:4em}}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIkQ6L0NvTGVhcm5pbmdIdWIvQ29MZWFybmluZ1dlYi1Gcm9udEVuZC9zcmMvcm91dGVzL19lcnJvci5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cclxuXHRleHBvcnQgbGV0IGVycm9yLCBzdGF0dXM7XHJcblxyXG5cdGxldCBkZXYgPSBcImRldmVsb3BtZW50XCIgPT09IFwiZGV2ZWxvcG1lbnRcIjtcclxuPC9zY3JpcHQ+XHJcblxyXG48c3ZlbHRlOmhlYWQ+XHJcblx0PHRpdGxlPntzdGF0dXN9PC90aXRsZT5cclxuPC9zdmVsdGU6aGVhZD5cclxuXHJcbjxoMT57c3RhdHVzfTwvaDE+XHJcblxyXG48cD57ZXJyb3IubWVzc2FnZX08L3A+XHJcblxyXG57I2lmIGRldiAmJiBlcnJvci5zdGFja31cclxuXHQ8cHJlPntlcnJvci5zdGFja308L3ByZT5cclxuey9pZn1cclxuXHJcbjxzdHlsZT5cclxuXHRoMSxcclxuXHRwIHtcclxuXHRcdG1hcmdpbjogMCBhdXRvO1xyXG5cdH1cclxuXHJcblx0aDEge1xyXG5cdFx0Zm9udC1zaXplOiAyLjhlbTtcclxuXHRcdGZvbnQtd2VpZ2h0OiA3MDA7XHJcblx0XHRtYXJnaW46IDAgMCAwLjVlbSAwO1xyXG5cdH1cclxuXHJcblx0cCB7XHJcblx0XHRtYXJnaW46IDFlbSBhdXRvO1xyXG5cdH1cclxuXHJcblx0QG1lZGlhIChtaW4td2lkdGg6IDQ4MHB4KSB7XHJcblx0XHRoMSB7XHJcblx0XHRcdGZvbnQtc2l6ZTogNGVtO1xyXG5cdFx0fVxyXG5cdH1cclxuPC9zdHlsZT4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBbUJDLGdCQUFFLENBQ0YsQ0FBQyxjQUFDLENBQUMsQUFDRixNQUFNLENBQUUsQ0FBQyxDQUFDLElBQUksQUFDZixDQUFDLEFBRUQsRUFBRSxjQUFDLENBQUMsQUFDSCxTQUFTLENBQUUsS0FBSyxDQUNoQixXQUFXLENBQUUsR0FBRyxDQUNoQixNQUFNLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxBQUNwQixDQUFDLEFBRUQsQ0FBQyxjQUFDLENBQUMsQUFDRixNQUFNLENBQUUsR0FBRyxDQUFDLElBQUksQUFDakIsQ0FBQyxBQUVELE1BQU0sQUFBQyxZQUFZLEtBQUssQ0FBQyxBQUFDLENBQUMsQUFDMUIsRUFBRSxjQUFDLENBQUMsQUFDSCxTQUFTLENBQUUsR0FBRyxBQUNmLENBQUMsQUFDRixDQUFDIn0= */input.svelte-12b9iyb::-webkit-outer-spin-button,input.svelte-12b9iyb::-webkit-inner-spin-button{-webkit-appearance:none;margin:0}input[type="number"].svelte-12b9iyb{-moz-appearance:textfield}input[type="checkbox"].svelte-12b9iyb{cursor:pointer;margin:2px}label.svelte-12b9iyb{cursor:pointer;font-size:1.25rem;color:#55595c}.policy-label.svelte-12b9iyb{padding-top:20px}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */.switch.svelte-1e55jv3{position:relative;display:inline-block;width:60px;height:34px}.switch.svelte-1e55jv3 input.svelte-1e55jv3{opacity:0;width:0;height:0}.slider.svelte-1e55jv3{position:absolute;cursor:pointer;top:0;left:0;right:0;bottom:0;background-color:#ccc;-webkit-transition:.4s;transition:.4s}.slider.svelte-1e55jv3:before{position:absolute;content:"";height:26px;width:26px;left:4px;bottom:4px;background-color:white;-webkit-transition:.4s;transition:.4s}input:checked+.slider.svelte-1e55jv3{background-color:#2196F3}input:focus+.slider.svelte-1e55jv3{box-shadow:0 0 1px #2196F3}input:checked+.slider.svelte-1e55jv3:before{-webkit-transform:translateX(26px);-ms-transform:translateX(26px);transform:translateX(26px)}.slider.round.svelte-1e55jv3{border-radius:34px}.slider.round.svelte-1e55jv3:before{border-radius:50%}.divider-grey.svelte-1e55jv3{padding-bottom:1rem;border-top:solid 4px #d3d3d3}.green-text.svelte-1e55jv3{color:#7ed5b7}.grey-text.svelte-1e55jv3{color:cadetblue;font-weight:700}.topic-text.svelte-1e55jv3{color:#a9a9a9}.orange-text.svelte-1e55jv3{color:#ffaa3c}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */.desc-parent.svelte-fe1sja{margin:12px 0 0 0}.desc-text.svelte-fe1sja{margin:0 0 5px 0}.red-text.svelte-fe1sja{color:red}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */.full-width.svelte-1ut50x2{width:100%}.divider-grey.svelte-1ut50x2{width:100%;padding:0.2rem;border-bottom:solid 4px #d3d3d3}.suggestions-text.svelte-1ut50x2{color:#7ed5b7}.help-text.svelte-1ut50x2{font-size:1.2rem
}.no-margin.svelte-1ut50x2{margin:0}.help-text-container.svelte-1ut50x2{padding-top:10px}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIkQ6L0NvTGVhcm5pbmdIdWIvQ29MZWFybmluZ1dlYi1Gcm9udEVuZC9zcmMvcm91dGVzL19jb21wb25lbnRzL0hvbWUuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XHJcblx0aW1wb3J0IFNlYXJjaExpc3QgZnJvbSAnLi9TZWFyY2hMaXN0LnN2ZWx0ZSc7XHJcblx0bGV0IHNlYXJjaFRleHQgPSAnJztcclxuXHRjb25zdCBwZW9wbGVMaXN0ID0gW1xyXG5cdFx0e1xyXG5cdFx0XHRuYW1lOidKaG9uIFNtaXRoJyxcclxuXHRcdFx0cHJvZmlsZUltYWdlOiAnaW1hZ2VzL3RlbXAuanBnJyxcclxuXHRcdFx0aXNHdWlkZTogdHJ1ZSxcclxuXHRcdFx0aXNDb0xlYXJuZXI6IGZhbHNlLFxyXG5cdFx0XHRhb2U6IFtcIkVjb25vbWljc1wiLCBcIk1hY2hpbmUgTGVhcm5pbmdcIl0sXHJcblx0XHRcdGlzTmV3U3VnZ2VzdGlvbjogdHJ1ZSxcclxuXHRcdH0sXHJcblx0XHR7XHJcblx0XHRcdG5hbWU6J0p1bGllIEpvZScsXHJcblx0XHRcdHByb2ZpbGVJbWFnZTogJ2ltYWdlcy90ZW1wLmpwZycsXHJcblx0XHRcdGlzR3VpZGU6IHRydWUsXHJcblx0XHRcdGlzQ29MZWFybmVyOiBmYWxzZSxcclxuXHRcdFx0YW9lOiBbXCJQeXRob24gTGFuZ3VhZ2VcIiwgXCJDKytcIl0sXHJcblx0XHRcdGlzTmV3U3VnZ2VzdGlvbjogZmFsc2UsXHJcblx0XHR9LFxyXG5cdFx0e1xyXG5cdFx0XHRuYW1lOidOZWhhIEphaW4nLFxyXG5cdFx0XHRwcm9maWxlSW1hZ2U6ICdpbWFnZXMvdGVtcC5qcGcnLFxyXG5cdFx0XHRpc0d1aWRlOiBmYWxzZSxcclxuXHRcdFx0aXNDb0xlYXJuZXI6IHRydWUsXHJcblx0XHRcdGFvZTogW1wiQ2xhc3NpY2FsIE11c2ljXCIsIFwiUG9wIE11c2ljXCJdLFxyXG5cdFx0XHRpc05ld1N1Z2dlc3Rpb246IGZhbHNlLFxyXG5cdFx0fSxcclxuXHRdO1x0XHJcblx0ZnVuY3Rpb24gb25DbG9zZShpbmRleCkge1xyXG5cdFx0cGVvcGxlTGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xyXG5cdFx0cGVvcGxlTGlzdCA9IHBlb3BsZUxpc3Q7XHJcblx0fVxyXG5cdFxyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZT5cclxuLmZ1bGwtd2lkdGh7XHJcblx0d2lkdGg6IDEwMCU7XHJcbn1cclxuLmRpdmlkZXItZ3JleXtcclxuXHR3aWR0aDogMTAwJTtcclxuXHRwYWRkaW5nOiAwLjJyZW07XHJcbiAgICBib3JkZXItYm90dG9tOiBzb2xpZCA0cHggI2QzZDNkMztcclxufVxyXG4uc3VnZ2VzdGlvbnMtdGV4dHtcclxuXHRjb2xvcjogIzdlZDViNztcclxufVxyXG4uaGVscC10ZXh0e1xyXG5cdGZvbnQtc2l6ZTogMS4ycmVtXHJcbn1cclxuLm5vLW1hcmdpbntcclxuXHRtYXJnaW46IDA7XHJcbn1cclxuLmhlbHAtdGV4dC1jb250YWluZXJ7XHJcblx0cGFkZGluZy10b3A6IDEwcHg7XHJcbn1cclxuPC9zdHlsZT5cclxuXHJcbjxzdmVsdGU6aGVhZD5cclxuXHQ8dGl0bGU+TGVhcm5pbmcgV2ViPC90aXRsZT5cclxuPC9zdmVsdGU6aGVhZD5cclxuXHJcbjxkaXYgY2xhc3M9XCJob21lLXBhZ2VcIj5cclxuXHQ8ZGl2IGNsYXNzPVwiY29udGFpbmVyIHBhZ2VcIj5cclxuXHRcdDxkaXYgY2xhc3M9XCJyb3dcIj5cclxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC1tZC04IG9mZnNldC1tZC0yIGNvbC14cy0xMlwiPlxyXG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cFwiPlxyXG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cImlucHV0LWdyb3VwLWJ0blwiPlxyXG5cdFx0XHRcdFx0PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tZGVmYXVsdFwiIHR5cGU9XCJzdWJtaXRcIj5cclxuXHRcdFx0XHRcdFx0PGlvbi1pY29uIG5hbWU9XCJzZWFyY2gtb3V0bGluZVwiPjwvaW9uLWljb24+XHJcblx0XHRcdFx0XHQ8L2J1dHRvbj5cclxuXHRcdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHRcdFx0PGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBwbGFjZWhvbGRlcj1cIlNlYXJjaCBmb3IgdGhlIHRvcGljIHlvdSB3aXNoIHRvIGxlYXJuXCIgYmluZDp2YWx1ZT17c2VhcmNoVGV4dH0+XHJcblx0XHRcdFx0PC9kaXY+XHJcblx0XHRcdFx0PGhyIC8+XHJcblx0XHRcdFx0PGRpdiBjbGFzcz1cInJvd1wiPlxyXG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cImNvbC1tZC02XCI+XHJcblx0XHRcdFx0XHRcdDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGZ1bGwtd2lkdGhcIj5WaWV3IHJlY2lldmVkIHJlcXVlc3RzPC9idXR0b24+XHJcblx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJjb2wtbWQtNlwiPlxyXG5cdFx0XHRcdFx0XHQ8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBmdWxsLXdpZHRoXCI+VmlldyBzZW50IHJlcXVlc3RzPC9idXR0b24+XHJcblx0XHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHQ8L2Rpdj5cclxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiZGl2aWRlci1ncmV5XCI+PC9kaXY+XHJcblx0XHRcdFx0PHAgY2xhc3M9XCJuby1tYXJnaW4gaGVscC10ZXh0LWNvbnRhaW5lclwiPlxyXG5cdFx0XHRcdFx0PGlvbi1pY29uIG5hbWU9XCJnbG9iZS1vdXRsaW5lXCI+PC9pb24taWNvbj5cclxuXHRcdFx0XHRcdDxzcGFuIGNsYXNzPVwiaGVscC10ZXh0XCI+UGVvcGxlIHlvdSBtYXkgZmluZCBoZWxwZnVsLjwvc3Bhbj5cclxuXHRcdFx0XHQ8L3A+XHJcblx0XHRcdFx0PHAgY2xhc3M9XCJuby1tYXJnaW4gc3VnZ2VzdGlvbnMtdGV4dFwiPlN1Z2dlc3Rpb25zIGFyZSBiYXNlZCB1cG9uIGxlYXJuaW5nIGludGVyZXN0cy48L3A+XHJcblx0XHRcdFx0PGRpdiBjbGFzcz1cImRpdmlkZXItZ3JleVwiPjwvZGl2PlxyXG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJzZWFyY2gtbGlzdC1jb250YWluZXJcIj5cclxuXHRcdFx0XHRcdHsjZWFjaCBwZW9wbGVMaXN0IGFzIGxpc3QsIGl9XHJcblx0XHRcdFx0XHRcdDxTZWFyY2hMaXN0IGxpc3REYXRhPXtsaXN0fSBvbkRpc21pc3M9e29uQ2xvc2V9IGluZGV4PXtpfSAvPlxyXG5cdFx0XHRcdFx0ey9lYWNofVxyXG5cdFx0XHRcdDwvZGl2PlxyXG5cdFx0XHQ8L2Rpdj5cclxuXHRcdDwvZGl2PlxyXG5cdDwvZGl2PlxyXG48L2Rpdj4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBcUNBLDBCQUFXLENBQUMsQUFDWCxLQUFLLENBQUUsSUFBSSxBQUNaLENBQUMsQUFDRCw0QkFBYSxDQUFDLEFBQ2IsS0FBSyxDQUFFLElBQUksQ0FDWCxPQUFPLENBQUUsTUFBTSxDQUNaLGFBQWEsQ0FBRSxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQUFDcEMsQ0FBQyxBQUNELGdDQUFpQixDQUFDLEFBQ2pCLEtBQUssQ0FBRSxPQUFPLEFBQ2YsQ0FBQyxBQUNELHlCQUFVLENBQUMsQUFDVixTQUFTLENBQUUsTUFBTTtBQUNsQixDQUFDLEFBQ0QseUJBQVUsQ0FBQyxBQUNWLE1BQU0sQ0FBRSxDQUFDLEFBQ1YsQ0FBQyxBQUNELG1DQUFvQixDQUFDLEFBQ3BCLFdBQVcsQ0FBRSxJQUFJLEFBQ2xCLENBQUMifQ== */.remove.svelte-hmuuh{position:absolute;right:20px;top:10px}.search-list.svelte-hmuuh{position:relative;padding-top:15px}.image-container.svelte-hmuuh{text-align:center}.user-type.svelte-hmuuh{padding-top:3px;font-weight:600}.guide-span.svelte-hmuuh{color:#8d8d8d}.co-learner-span.svelte-hmuuh{color:#7ed5b7}.name-container.svelte-hmuuh{width:100%}.name.svelte-hmuuh{font-size:22px;color:gray;font-weight:600}.is-new-suggestion.svelte-hmuuh{color:deepskyblue;margin-left:10px}.aoe-span.svelte-hmuuh{color:orange;font-weight:600}.no-display.svelte-hmuuh{display:none}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIkQ6L0NvTGVhcm5pbmdIdWIvQ29MZWFybmluZ1dlYi1Gcm9udEVuZC9zcmMvcm91dGVzL19jb21wb25lbnRzL1NlYXJjaExpc3Quc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XHJcbiAgICBleHBvcnQgbGV0IGxpc3REYXRhO1xyXG4gICAgZXhwb3J0IGxldCBvbkRpc21pc3M7XHJcbiAgICBleHBvcnQgbGV0IGluZGV4O1xyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZT5cclxuLnJlbW92ZXtcclxuXHRwb3NpdGlvbjogYWJzb2x1dGU7XHJcblx0cmlnaHQ6IDIwcHg7XHJcbiAgICB0b3A6IDEwcHg7XHJcbn1cclxuLnNlYXJjaC1saXN0e1xyXG5cdHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuXHRwYWRkaW5nLXRvcDogMTVweDtcclxufVxyXG4uaW1hZ2UtY29udGFpbmVye1xyXG5cdHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG4udXNlci10eXBle1xyXG5cdHBhZGRpbmctdG9wOiAzcHg7XHJcblx0Zm9udC13ZWlnaHQ6IDYwMDtcclxufVxyXG4uZ3VpZGUtc3BhbntcclxuICAgIGNvbG9yOiAjOGQ4ZDhkO1xyXG59XHJcbi5jby1sZWFybmVyLXNwYW57XHJcbiAgICBjb2xvcjogIzdlZDViNztcclxufVxyXG4ubmFtZS1jb250YWluZXJ7XHJcblx0d2lkdGg6IDEwMCU7XHJcbn1cclxuLm5hbWV7XHJcblx0Zm9udC1zaXplOiAyMnB4O1xyXG4gICAgY29sb3I6IGdyYXk7XHJcbiAgICBmb250LXdlaWdodDogNjAwO1xyXG59XHJcbi5pcy1uZXctc3VnZ2VzdGlvbntcclxuXHRjb2xvcjogZGVlcHNreWJsdWU7XHJcblx0bWFyZ2luLWxlZnQ6IDEwcHg7XHJcbn1cclxuLmFvZS1zcGFue1xyXG5cdGNvbG9yOiBvcmFuZ2U7XHJcbiAgICBmb250LXdlaWdodDogNjAwO1xyXG59XHJcbi5uby1kaXNwbGF5e1xyXG4gICAgZGlzcGxheTogbm9uZTtcclxufVxyXG48L3N0eWxlPlxyXG5cclxuPGRpdiBjbGFzcz1cInNlYXJjaC1saXN0IHJvd1wiPlxyXG4gICAgPGRpdiBjbGFzcz1cImltYWdlLWNvbnRhaW5lciBjb2wtc20tMlwiPlxyXG4gICAgICAgIDxpbWcgc3JjPXtsaXN0RGF0YS5wcm9maWxlSW1hZ2V9IGNsYXNzPVwiaW1nLWNpcmNsZVwiIGFsdD1cIlByb2ZpbGVcIiB3aWR0aD1cIjgwXCIgaGVpZ2h0PVwiODBcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwidXNlci10eXBlXCI+XHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPXtgZ3VpZGUtc3BhbiAkeyhsaXN0RGF0YS5pc0d1aWRlKSA/ICcnIDogJ25vLWRpc3BsYXknfWB9Pkd1aWRlIDxzcGFuIGNsYXNzPVwiY2hlY2staWNvblwiPjxpb24taWNvbiBuYW1lPVwiY2hlY2ttYXJrLWRvbmUtb3V0bGluZVwiPjwvaW9uLWljb24+PC9zcGFuPjwvc3Bhbj5cclxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9e2Bjby1sZWFybmVyLXNwYW4gJHsobGlzdERhdGEuaXNDb0xlYXJuZXIpID8gJycgOiAnbm8tZGlzcGxheSd9YH0+Q28tTGVhcm5lcjwvc3Bhbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gICAgPGRpdiBjbGFzcz1cImRlc2MtY29udGFpbmVyIGNvbC1zbS0xMFwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJuYW1lLWNvbnRhaW5lclwiPlxyXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm5hbWVcIj57bGlzdERhdGEubmFtZX08L3NwYW4+XHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPXtgaXMtbmV3LXN1Z2dlc3Rpb24gJHsobGlzdERhdGEuaXNOZXdTdWdnZXN0aW9uKSA/ICcnIDogJ25vLWRpc3BsYXknfWB9Pk5ldyBTdWdnZXN0aW9uPC9zcGFuPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJhb2UtY29udGFpbmVyIHJvd1wiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYW9lLXNwYW4gY29sLXhzLTFcIj5BT0U6PC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wteHMtMTBcIj5cclxuICAgICAgICAgICAgICAgIHsjZWFjaCBsaXN0RGF0YS5hb2UgYXMgZXh0ZXJ0aXNlLCBpfVxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXY+eyhpKzEpfS4ge2V4dGVydGlzZX08L2Rpdj5cclxuICAgICAgICAgICAgICAgIHsvZWFjaH1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICAgIDxkaXYgY2xhc3M9XCJyZW1vdmVcIj5cclxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImNsb3NlXCIgYXJpYS1sYWJlbD1cIkNsb3NlXCIgb246Y2xpY2s9eygpID0+IG9uRGlzbWlzcyhpbmRleCl9PlxyXG4gICAgICAgICAgICA8c3BhbiBhcmlhLWhpZGRlbj1cInRydWVcIj4mdGltZXM7PC9zcGFuPlxyXG4gICAgICAgIDwvYnV0dG9uPlxyXG4gICAgPC9kaXY+XHJcbiAgICA8ZGl2IGNsYXNzPVwiY29sLXhzLTEyXCI+XHJcbiAgICAgICAgPGhyIC8+XHJcbiAgICA8L2Rpdj5cclxuPC9kaXY+Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLG9CQUFPLENBQUMsQUFDUCxRQUFRLENBQUUsUUFBUSxDQUNsQixLQUFLLENBQUUsSUFBSSxDQUNSLEdBQUcsQ0FBRSxJQUFJLEFBQ2IsQ0FBQyxBQUNELHlCQUFZLENBQUMsQUFDWixRQUFRLENBQUUsUUFBUSxDQUNsQixXQUFXLENBQUUsSUFBSSxBQUNsQixDQUFDLEFBQ0QsNkJBQWdCLENBQUMsQUFDaEIsVUFBVSxDQUFFLE1BQU0sQUFDbkIsQ0FBQyxBQUNELHVCQUFVLENBQUMsQUFDVixXQUFXLENBQUUsR0FBRyxDQUNoQixXQUFXLENBQUUsR0FBRyxBQUNqQixDQUFDLEFBQ0Qsd0JBQVcsQ0FBQyxBQUNSLEtBQUssQ0FBRSxPQUFPLEFBQ2xCLENBQUMsQUFDRCw2QkFBZ0IsQ0FBQyxBQUNiLEtBQUssQ0FBRSxPQUFPLEFBQ2xCLENBQUMsQUFDRCw0QkFBZSxDQUFDLEFBQ2YsS0FBSyxDQUFFLElBQUksQUFDWixDQUFDLEFBQ0Qsa0JBQUssQ0FBQyxBQUNMLFNBQVMsQ0FBRSxJQUFJLENBQ1osS0FBSyxDQUFFLElBQUksQ0FDWCxXQUFXLENBQUUsR0FBRyxBQUNwQixDQUFDLEFBQ0QsK0JBQWtCLENBQUMsQUFDbEIsS0FBSyxDQUFFLFdBQVcsQ0FDbEIsV0FBVyxDQUFFLElBQUksQUFDbEIsQ0FBQyxBQUNELHNCQUFTLENBQUMsQUFDVCxLQUFLLENBQUUsTUFBTSxDQUNWLFdBQVcsQ0FBRSxHQUFHLEFBQ3BCLENBQUMsQUFDRCx3QkFBVyxDQUFDLEFBQ1IsT0FBTyxDQUFFLElBQUksQUFDakIsQ0FBQyJ9 */
